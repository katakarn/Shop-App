package com.shopapp.product_service.service;
import com.shopapp.product_service.model.Order;
import com.shopapp.product_service.model.OrderStatus;
import com.shopapp.product_service.repository.OrderRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Thread ‡πÅ‡∏¢‡∏Å
import org.springframework.stereotype.Service;

import java.util.Random;

@Service
@RequiredArgsConstructor
@Slf4j
public class PaymentService {

    private final OrderRepository orderRepository;

    // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô @EnableAsync ‡πÉ‡∏ô ShopappBackendApplication.java ‡∏Å‡πà‡∏≠‡∏ô
    @Async
    public void processPayment(Long orderId) {
        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á Latency ‡∏Ç‡∏≠‡∏á Payment Gateway (‡∏£‡∏≠ 1-3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        try {
            long processingTime = (new Random().nextInt(3) + 1) * 1000;
            log.warn("Payment Gateway: Processing payment for Order ID {}... (simulated {}ms delay)", orderId, processingTime);
            Thread.sleep(processingTime);
        } catch (InterruptedException ignored) {
        }

        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: 90% ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, 10% ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        boolean success = new Random().nextDouble() < 0.9;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Order ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        updateOrderStatusAfterPayment(orderId, success);
    }

    @Transactional
    public void updateOrderStatusAfterPayment(Long orderId, boolean success) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Order not found during payment update"));

        if (success) {
            order.setStatus(OrderStatus.PROCESSING); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô PROCESSING
            order.setTransactionId("TXN-" + System.currentTimeMillis());
            log.info("üí∞ Order ID {} payment SUCCEEDED. Status updated to PROCESSING.", orderId);
        } else {
            // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö (Rollback Inventory) ‡∏î‡πâ‡∏ß‡∏¢
            order.setStatus(OrderStatus.CANCELLED); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô CANCELLED
            log.error("‚ùå Order ID {} payment FAILED. Status updated to CANCELLED.", orderId);
        }

        orderRepository.save(order);
    }
}
